package pub.pdsd.fbfriendtracker.Utils;


import java.io.InputStream;


import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.HttpStatus;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import pub.pdsd.fbfriendtracker.Model.UserData;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.AsyncTask;
import android.util.Log;

public class AvatarFetcher extends AsyncTask<UserData, Integer, Void>{

	public static final int DOWNLOAD_FAILED = -1;
	public static final int DOWNLOAD_SUCCESS = 1;
	
	public static final String TAG = "AvatarFetcher"; 
	
	private AvatarFetcherDelegate delegate;
	
	public AvatarFetcher(AvatarFetcherDelegate delegate) {
		this.delegate = delegate;
	}
	
	@Override
	protected Void doInBackground(UserData... params) {
		
		for(int i = 0; i < params.length; i++){
			
			if(params[i] != null && params[i].getProfilePictureUrl() != null) {

				params[i].setAvatar(downloadBitmap(params[i].getProfilePictureUrl()));				
				this.publishProgress(i);
			}
		}
		return null;
	}

	private Bitmap downloadBitmap(String url) {
        
        final DefaultHttpClient client = new DefaultHttpClient();

       
        final HttpGet getRequest = new HttpGet(url);
        try {

            HttpResponse response = client.execute(getRequest);

            final int statusCode = response.getStatusLine().getStatusCode();

            if (statusCode != HttpStatus.SC_OK) {
                Log.d(TAG, String.format("downloadBitmap fail for %s", url));
                return null;

            }

            final HttpEntity entity = response.getEntity();
            if (entity != null) {
                InputStream inputStream = null;
                try {
                    
                    inputStream = entity.getContent();
                    
                    final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);

                    return bitmap;
                } finally {
                    if (inputStream != null) {
                        inputStream.close();
                    }
                    entity.consumeContent();
                }
            }
        } catch (Exception e) {
            getRequest.abort();
        } 

        return null;
    }

	
	@Override
	protected void onProgressUpdate(Integer...a){
		delegate.onSingleAvatarDwFinishedCallback(a[0]);
    }

	@Override
    protected void onPostExecute(Void res) {
		delegate.onAvatarsDwFinishedCallback(DOWNLOAD_SUCCESS);
    }
}
